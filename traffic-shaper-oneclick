#!/bin/bash
#
# 系统级智能流量控制方案 (Linux) - 一键脚本
# 此脚本使用Linux的流量控制工具(tc)和带宽监控来避开VPS限速策略
# 支持安装、配置、运行、还原等一键操作
#

# 颜色代码
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # 无颜色

# 配置文件路径
CONFIG_FILE="/etc/traffic-shaper.conf"
SERVICE_FILE="/etc/systemd/system/traffic-shaper.service"
SCRIPT_PATH="/usr/local/bin/traffic-shaper.sh"
LOG_FILE="/var/log/traffic-shaper.log"

# 全局变量声明
INTERFACE=""
MAX_BANDWIDTH=""
BANDWIDTH_TIME_LIMIT=""
MAX_CONTINUOUS_DATA=""
THROTTLE_BANDWIDTH=""
THROTTLE_DURATION=""
MONITOR_INTERVAL=""

# 显示主菜单
show_menu() {
    clear
    echo -e "${GREEN}=====================================${NC}"
    echo -e "${GREEN}      系统级智能流量控制方案        ${NC}"
    echo -e "${GREEN}=====================================${NC}"
    echo -e "${CYAN}请选择操作:${NC}"
    echo -e "${YELLOW}1.${NC} 安装并配置流量控制"
    echo -e "${YELLOW}2.${NC} 启动流量控制服务"
    echo -e "${YELLOW}3.${NC} 停止流量控制服务"
    echo -e "${YELLOW}4.${NC} 重启流量控制服务"
    echo -e "${YELLOW}5.${NC} 查看服务状态"
    echo -e "${YELLOW}6.${NC} 查看实时日志"
    echo -e "${YELLOW}7.${NC} 修改配置"
    echo -e "${YELLOW}8.${NC} 完全还原系统 (卸载)"
    echo -e "${YELLOW}9.${NC} 退出"
    echo -e "${GREEN}=====================================${NC}"
    echo -n "请输入选项 [1-9]: "
}

# 检查是否为root用户
check_root() {
    if [ "$(id -u)" != "0" ]; then
        echo -e "${RED}[!] 错误: 此脚本需要root权限运行${NC}"
        exit 1
    fi
}

# 依赖检查和安装
check_and_install_dependencies() {
    echo -e "${BLUE}[*] 检查并安装依赖...${NC}"
    
    # 检测系统类型
    if command -v apt-get &> /dev/null; then
        PKG_MANAGER="apt-get"
        INSTALL_CMD="apt-get install -y"
    elif command -v yum &> /dev/null; then
        PKG_MANAGER="yum"
        INSTALL_CMD="yum install -y"
    elif command -v dnf &> /dev/null; then
        PKG_MANAGER="dnf"
        INSTALL_CMD="dnf install -y"
    else
        echo -e "${RED}[!] 不支持的系统，请手动安装依赖${NC}"
        exit 1
    fi
    
    # 检查并安装依赖
    dependencies=("iproute2" "bc")
    for dep in "${dependencies[@]}"; do
        if ! command -v tc &> /dev/null || ! command -v bc &> /dev/null; then
            echo -e "${YELLOW}[*] 安装依赖: $dep${NC}"
            $INSTALL_CMD $dep
        fi
    done
    
    # 特殊处理ifstat
    if ! command -v ifstat &> /dev/null; then
        echo -e "${YELLOW}[*] 安装 ifstat...${NC}"
        if [ "$PKG_MANAGER" = "apt-get" ]; then
            $INSTALL_CMD ifstat
        else
            # CentOS/RHEL 可能需要额外的源
            $INSTALL_CMD epel-release 2>/dev/null
            $INSTALL_CMD ifstat || echo -e "${YELLOW}[!] ifstat安装失败，将使用替代方案${NC}"
        fi
    fi
    
    echo -e "${GREEN}[+] 依赖检查完成${NC}"
}

# 用户输入函数
get_user_input() {
    echo -e "${GREEN}=====================================${NC}"
    echo -e "${GREEN}      流量控制配置向导              ${NC}"
    echo -e "${GREEN}=====================================${NC}"
    echo -e "${YELLOW}请输入配置参数（直接回车使用默认值，输入0表示不限制）:${NC}"
    echo ""
    
    # 获取可用网络接口
    echo -e "${BLUE}可用的网络接口:${NC}"
    ip link show | grep -E "^[0-9]+:" | awk -F': ' '{print "    " $2}' | sed 's/@.*//'
    echo ""
    
    # 网络接口
    read -p "请输入网络接口名称 [默认: eth0]: " input_interface
    INTERFACE=${input_interface:-"eth0"}
    
    # 验证网络接口
    if ! ip link show $INTERFACE &>/dev/null; then
        echo -e "${RED}[!] 错误: 网络接口 $INTERFACE 不存在${NC}"
        return 1
    fi
    echo -e "   设置为: ${GREEN}$INTERFACE${NC}"
    echo ""
    
    # 最大带宽
    read -p "请输入正常使用时的最大带宽 (Mbps) [默认: 48, 输入0不限制]: " input_max_bw
    MAX_BANDWIDTH=${input_max_bw:-48}
    if [ "$MAX_BANDWIDTH" = "0" ]; then
        echo -e "   设置为: ${GREEN}不限制${NC}"
    else
        echo -e "   设置为: ${GREEN}${MAX_BANDWIDTH}Mbps${NC}"
    fi
    echo ""
    
    # 带宽时间限制
    read -p "请输入高带宽使用时间限制 (秒) [默认: 300, 输入0不限制]: " input_bw_time
    BANDWIDTH_TIME_LIMIT=${input_bw_time:-300}
    if [ "$BANDWIDTH_TIME_LIMIT" = "0" ]; then
        echo -e "   设置为: ${GREEN}不限制${NC}"
    else
        echo -e "   设置为: ${GREEN}${BANDWIDTH_TIME_LIMIT}秒${NC}"
    fi
    echo ""
    
    # 连续数据限制
    read -p "请输入连续数据传输限制 (MB) [默认: 4800, 输入0不限制]: " input_max_data
    MAX_CONTINUOUS_DATA=${input_max_data:-4800}
    if [ "$MAX_CONTINUOUS_DATA" = "0" ]; then
        echo -e "   设置为: ${GREEN}不限制${NC}"
    else
        echo -e "   设置为: ${GREEN}${MAX_CONTINUOUS_DATA}MB${NC}"
    fi
    echo ""
    
    # 触发限速后的带宽
    read -p "请输入触发限速后的带宽 (Mbps) [默认: 10]: " input_throttle_bw
    THROTTLE_BANDWIDTH=${input_throttle_bw:-10}
    echo -e "   设置为: ${GREEN}${THROTTLE_BANDWIDTH}Mbps${NC}"
    echo ""
    
    # 限速持续时间
    read -p "请输入限速持续时间 (秒) [默认: 300]: " input_throttle_duration
    THROTTLE_DURATION=${input_throttle_duration:-300}
    echo -e "   设置为: ${GREEN}${THROTTLE_DURATION}秒${NC}"
    echo ""
    
    # 监控间隔
    read -p "请输入监控间隔 (秒) [默认: 5]: " input_monitor_interval
    MONITOR_INTERVAL=${input_monitor_interval:-5}
    echo -e "   设置为: ${GREEN}${MONITOR_INTERVAL}秒${NC}"
    echo ""
    
    # 显示配置确认
    show_config_summary
    
    read -p "确认配置并继续安装? [Y/n]: " confirm
    if [[ $confirm =~ ^[Nn]$ ]]; then
        echo -e "${RED}用户取消操作${NC}"
        return 1
    fi
    
    return 0
}

# 显示配置摘要
show_config_summary() {
    echo -e "${YELLOW}=====================================${NC}"
    echo -e "${YELLOW}配置确认:${NC}"
    echo -e "网络接口: ${GREEN}$INTERFACE${NC}"
    if [ "$MAX_BANDWIDTH" = "0" ]; then
        echo -e "正常最大带宽: ${GREEN}不限制${NC}"
    else
        echo -e "正常最大带宽: ${GREEN}${MAX_BANDWIDTH}Mbps${NC}"
    fi
    if [ "$BANDWIDTH_TIME_LIMIT" = "0" ]; then
        echo -e "高带宽时间限制: ${GREEN}不限制${NC}"
    else
        echo -e "高带宽时间限制: ${GREEN}${BANDWIDTH_TIME_LIMIT}秒${NC}"
    fi
    if [ "$MAX_CONTINUOUS_DATA" = "0" ]; then
        echo -e "连续数据限制: ${GREEN}不限制${NC}"
    else
        echo -e "连续数据限制: ${GREEN}${MAX_CONTINUOUS_DATA}MB${NC}"
    fi
    echo -e "限速后带宽: ${GREEN}${THROTTLE_BANDWIDTH}Mbps${NC}"
    echo -e "限速持续时间: ${GREEN}${THROTTLE_DURATION}秒${NC}"
    echo -e "监控间隔: ${GREEN}${MONITOR_INTERVAL}秒${NC}"
    echo -e "${YELLOW}=====================================${NC}"
}

# 保存配置
save_config() {
    cat > $CONFIG_FILE << EOF
# 流量控制配置文件
INTERFACE="$INTERFACE"
MAX_BANDWIDTH="$MAX_BANDWIDTH"
BANDWIDTH_TIME_LIMIT="$BANDWIDTH_TIME_LIMIT"
MAX_CONTINUOUS_DATA="$MAX_CONTINUOUS_DATA"
THROTTLE_BANDWIDTH="$THROTTLE_BANDWIDTH"
THROTTLE_DURATION="$THROTTLE_DURATION"
MONITOR_INTERVAL="$MONITOR_INTERVAL"
LOG_FILE="$LOG_FILE"
EOF
    echo -e "${GREEN}[+] 配置已保存到 $CONFIG_FILE${NC}"
}

# 加载配置
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source $CONFIG_FILE
        return 0
    else
        echo -e "${RED}[!] 配置文件不存在: $CONFIG_FILE${NC}"
        return 1
    fi
}

# 创建监控脚本
create_monitor_script() {
    cat > $SCRIPT_PATH << 'EOF'
#!/bin/bash

# 加载配置
CONFIG_FILE="/etc/traffic-shaper.conf"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] 错误: 配置文件不存在" >> /var/log/traffic-shaper.log
    exit 1
fi

source $CONFIG_FILE

# 记录事件
log_event() {
    local message=$1
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" >> $LOG_FILE
}

# 初始化流量控制
init_tc() {
    # 清除现有规则
    tc qdisc del dev $INTERFACE root 2>/dev/null
    
    if [ "$MAX_BANDWIDTH" != "0" ]; then
        # 创建HTB qdisc
        tc qdisc add dev $INTERFACE root handle 1: htb default 10
        
        # 创建主要类别
        tc class add dev $INTERFACE parent 1: classid 1:1 htb rate 1000mbit
        
        # 创建受限带宽类别
        tc class add dev $INTERFACE parent 1:1 classid 1:10 htb rate ${MAX_BANDWIDTH}mbit ceil ${MAX_BANDWIDTH}mbit
        
        # 为受限带宽类添加SFQ队列规则
        tc qdisc add dev $INTERFACE parent 1:10 handle 10: sfq perturb 10
        
        log_event "流量控制初始化完成，带宽限制为 ${MAX_BANDWIDTH}Mbps"
    else
        log_event "带宽不限制，跳过流量控制初始化"
    fi
}

# 启用流量整形
enable_shaping() {
    local speed=$1
    if [ "$MAX_BANDWIDTH" != "0" ]; then
        tc class change dev $INTERFACE parent 1:1 classid 1:10 htb rate ${speed}mbit ceil ${speed}mbit
        log_event "设置带宽上限为 ${speed}Mbps"
    fi
}

# 启用限速模式
enable_throttle() {
    if [ "$MAX_BANDWIDTH" != "0" ]; then
        enable_shaping $THROTTLE_BANDWIDTH
        log_event "启用限速模式 - 带宽限制为 ${THROTTLE_BANDWIDTH}Mbps，持续 ${THROTTLE_DURATION}秒"
        
        # 在后台运行计时器
        (
            sleep $THROTTLE_DURATION
            enable_shaping $MAX_BANDWIDTH
            reset_counters
            log_event "限速时间结束，恢复正常带宽"
        ) &
        
        # 记录限速开始时间
        echo "$(date +%s)" > /tmp/throttle_start_time
    else
        log_event "带宽不限制，跳过限速操作"
    fi
}

# 检查是否处于限速状态
is_throttling() {
    if [ -f /tmp/throttle_start_time ]; then
        local start_time=$(cat /tmp/throttle_start_time)
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        if [ $elapsed -lt $THROTTLE_DURATION ]; then
            return 0
        else
            rm -f /tmp/throttle_start_time
            return 1
        fi
    fi
    return 1
}

# 重置计数器
reset_counters() {
    echo "0" > /tmp/traffic_total
    echo "$(date +%s)" > /tmp/traffic_start_time
    echo "0" > /tmp/high_bandwidth_start
    log_event "重置流量计数器"
}

# 获取当前带宽使用情况 (Mbps)
get_current_bandwidth() {
    if command -v ifstat &> /dev/null; then
        local bytes_per_sec=$(ifstat -i "$INTERFACE" -b 1 1 2>/dev/null | tail -1 | awk '{print $2}')
        if [ -z "$bytes_per_sec" ] || [ "$bytes_per_sec" = "0" ]; then
            echo "0"
        else
            echo "scale=2; $bytes_per_sec * 8 / 1000000" | bc
        fi
    else
        # 使用/proc/net/dev作为备用方案
        local rx1=$(cat /proc/net/dev | grep "$INTERFACE:" | awk '{print $2}')
        local tx1=$(cat /proc/net/dev | grep "$INTERFACE:" | awk '{print $10}')
        sleep 1
        local rx2=$(cat /proc/net/dev | grep "$INTERFACE:" | awk '{print $2}')
        local tx2=$(cat /proc/net/dev | grep "$INTERFACE:" | awk '{print $10}')
        
        local rx_speed=$(echo "scale=2; ($rx2 - $rx1) * 8 / 1000000" | bc)
        local tx_speed=$(echo "scale=2; ($tx2 - $tx1) * 8 / 1000000" | bc)
        
        # 返回下载速度（通常更关心下载）
        echo $rx_speed
    fi
}

# 获取已用流量 (MB)
get_used_traffic() {
    if [ ! -f /tmp/traffic_total ]; then
        echo "0" > /tmp/traffic_total
    fi
    cat /tmp/traffic_total
}

# 更新已用流量
update_traffic() {
    local new_mb=$1
    local current=$(get_used_traffic)
    echo "scale=2; $current + $new_mb" | bc > /tmp/traffic_total
}

# 主监控循环
monitor_traffic() {
    log_event "开始智能流量监控"
    
    # 初始化
    reset_counters
    init_tc
    
    while true; do
        # 检查是否处于限速状态
        if is_throttling; then
            sleep $MONITOR_INTERVAL
            continue
        fi
        
        # 获取当前带宽
        current_bw=$(get_current_bandwidth)
        
        # 计算传输流量
        transferred_mb=$(echo "scale=2; $current_bw * $MONITOR_INTERVAL / 8" | bc)
        
        # 更新总流量
        update_traffic $transferred_mb
        total_traffic=$(get_used_traffic)
        
        log_event "当前带宽: ${current_bw}Mbps, 已用流量: ${total_traffic}MB"
        
        # 检查连续数据限制
        if [ "$MAX_CONTINUOUS_DATA" != "0" ] && (( $(echo "$total_traffic > $MAX_CONTINUOUS_DATA" | bc -l) )); then
            log_event "触发连续数据限制 (${MAX_CONTINUOUS_DATA}MB) - 当前已用: ${total_traffic}MB"
            enable_throttle
            continue
        fi
        
        # 检查带宽时间限制
        if [ "$BANDWIDTH_TIME_LIMIT" != "0" ] && [ "$MAX_BANDWIDTH" != "0" ]; then
            threshold_bw=$(echo "scale=2; $MAX_BANDWIDTH * 0.9" | bc)
            if (( $(echo "$current_bw > $threshold_bw" | bc -l) )); then
                if [ ! -f /tmp/high_bandwidth_start ] || [ "$(cat /tmp/high_bandwidth_start)" = "0" ]; then
                    echo "$(date +%s)" > /tmp/high_bandwidth_start
                    log_event "检测到高带宽使用，开始计时"
                else
                    start_time=$(cat /tmp/high_bandwidth_start)
                    current_time=$(date +%s)
                    duration=$((current_time - start_time))
                    
                    if [ $duration -gt $BANDWIDTH_TIME_LIMIT ]; then
                        log_event "触发高带宽时间限制 (${BANDWIDTH_TIME_LIMIT}秒) - 持续时间: ${duration}秒"
                        enable_throttle
                        continue
                    fi
                fi
            else
                if [ -f /tmp/high_bandwidth_start ] && [ "$(cat /tmp/high_bandwidth_start)" != "0" ]; then
                    log_event "带宽恢复正常，重置高带宽计时器"
                    echo "0" > /tmp/high_bandwidth_start
                fi
            fi
        fi
        
        sleep $MONITOR_INTERVAL
    done
}

# 清理函数
cleanup() {
    tc qdisc del dev $INTERFACE root 2>/dev/null
    rm -f /tmp/traffic_total /tmp/traffic_start_time /tmp/high_bandwidth_start /tmp/throttle_start_time
    log_event "程序退出，清理完成"
    exit 0
}

trap cleanup EXIT INT TERM

# 运行监控
monitor_traffic
EOF

    chmod +x $SCRIPT_PATH
    echo -e "${GREEN}[+] 监控脚本已创建: $SCRIPT_PATH${NC}"
}

# 创建systemd服务
create_service() {
    cat > $SERVICE_FILE << EOF
[Unit]
Description=Traffic Shaper Service
After=network.target

[Service]
Type=simple
ExecStart=$SCRIPT_PATH
Restart=always
RestartSec=10
User=root

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    echo -e "${GREEN}[+] Systemd服务已创建: $SERVICE_FILE${NC}"
}

# 安装流量控制
install_traffic_control() {
    echo -e "${BLUE}[*] 开始安装流量控制...${NC}"
    
    # 检查依赖
    check_and_install_dependencies
    
    # 获取用户配置
    if ! get_user_input; then
        return 1
    fi
    
    # 保存配置
    save_config
    
    # 创建脚本和服务
    create_monitor_script
    create_service
    
    echo -e "${GREEN}[+] 安装完成！${NC}"
    echo -e "${YELLOW}[*] 使用以下命令管理服务:${NC}"
    echo -e "    启动: systemctl start traffic-shaper"
    echo -e "    停止: systemctl stop traffic-shaper"
    echo -e "    开机自启: systemctl enable traffic-shaper"
    echo -e "    查看状态: systemctl status traffic-shaper"
    echo -e "    查看日志: tail -f $LOG_FILE"
    
    read -p "是否现在启动服务并设置开机自启? [Y/n]: " start_now
    if [[ ! $start_now =~ ^[Nn]$ ]]; then
        systemctl enable traffic-shaper
        systemctl start traffic-shaper
        echo -e "${GREEN}[+] 服务已启动并设置为开机自启${NC}"
    fi
}

# 启动服务
start_service() {
    if systemctl start traffic-shaper; then
        echo -e "${GREEN}[+] 流量控制服务已启动${NC}"
    else
        echo -e "${RED}[!] 启动服务失败${NC}"
    fi
}

# 停止服务
stop_service() {
    if systemctl stop traffic-shaper; then
        echo -e "${GREEN}[+] 流量控制服务已停止${NC}"
    else
        echo -e "${RED}[!] 停止服务失败${NC}"
    fi
}

# 重启服务
restart_service() {
    if systemctl restart traffic-shaper; then
        echo -e "${GREEN}[+] 流量控制服务已重启${NC}"
    else
        echo -e "${RED}[!] 重启服务失败${NC}"
    fi
}

# 查看服务状态
show_status() {
    echo -e "${BLUE}[*] 服务状态:${NC}"
    systemctl status traffic-shaper
    echo ""
    echo -e "${BLUE}[*] 最近日志:${NC}"
    if [ -f "$LOG_FILE" ]; then
        tail -10 $LOG_FILE
    else
        echo -e "${YELLOW}[!] 日志文件不存在${NC}"
    fi
}

# 查看实时日志
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        echo -e "${BLUE}[*] 实时日志 (按Ctrl+C退出):${NC}"
        tail -f $LOG_FILE
    else
        echo -e "${RED}[!] 日志文件不存在${NC}"
    fi
}

# 修改配置
modify_config() {
    if load_config; then
        echo -e "${BLUE}[*] 当前配置:${NC}"
        show_config_summary
        echo ""
        echo -e "${YELLOW}[*] 重新配置...${NC}"
        if get_user_input; then
            save_config
            create_monitor_script
            echo -e "${GREEN}[+] 配置已更新${NC}"
            read -p "是否重启服务以应用新配置? [Y/n]: " restart_now
            if [[ ! $restart_now =~ ^[Nn]$ ]]; then
                restart_service
            fi
        fi
    else
        echo -e "${RED}[!] 请先安装流量控制系统${NC}"
    fi
}

# 完全还原系统
uninstall_system() {
    echo -e "${RED}[!] 警告: 此操作将完全卸载流量控制系统${NC}"
    read -p "确认要继续吗? [y/N]: " confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}[*] 开始卸载...${NC}"
        
        # 停止并禁用服务
        systemctl stop traffic-shaper 2>/dev/null
        systemctl disable traffic-shaper 2>/dev/null
        
        # 删除服务文件
        if [ -f "$SERVICE_FILE" ]; then
            rm -f $SERVICE_FILE
            echo -e "${GREEN}[+] 已删除服务文件${NC}"
        fi
        
        # 删除脚本文件
        if [ -f "$SCRIPT_PATH" ]; then
            rm -f $SCRIPT_PATH
            echo -e "${GREEN}[+] 已删除脚本文件${NC}"
        fi
        
        # 删除配置文件
        if [ -f "$CONFIG_FILE" ]; then
            rm -f $CONFIG_FILE
            echo -e "${GREEN}[+] 已删除配置文件${NC}"
        fi
        
        # 清理流量控制规则
        if load_config 2>/dev/null; then
            tc qdisc del dev $INTERFACE root 2>/dev/null
            echo -e "${GREEN}[+] 已清理流量控制规则${NC}"
        fi
        
        # 清理临时文件
        rm -f /tmp/traffic_total /tmp/traffic_start_time /tmp/high_bandwidth_start /tmp/throttle_start_time
        
        # 重新加载systemd
        systemctl daemon-reload
        
        echo -e "${GREEN}[+] 系统完全还原完成${NC}"
        echo -e "${YELLOW}[*] 日志文件保留在: $LOG_FILE${NC}"
        read -p "是否也删除日志文件? [y/N]: " del_log
        if [[ $del_log =~ ^[Yy]$ ]]; then
            rm -f $LOG_FILE
            echo -e "${GREEN}[+] 日志文件已删除${NC}"
        fi
    else
        echo -e "${YELLOW}[*] 取消卸载操作${NC}"
    fi
}

# 主函数
main() {
    check_root
    
    while true; do
        show_menu
        read choice
        
        case $choice in
            1)
                install_traffic_control
                ;;
            2)
                start_service
                ;;
            3)
                stop_service
                ;;
            4)
                restart_service
                ;;
            5)
                show_status
                ;;
            6)
                show_logs
                ;;
            7)
                modify_config
                ;;
            8)
                uninstall_system
                ;;
            9)
                echo -e "${GREEN}[+] 退出${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}[!] 无效选项，请重新选择${NC}"
                ;;
        esac
        
        echo ""
        read -p "按回车键继续..."
    done
}

# 运行主程序
main
